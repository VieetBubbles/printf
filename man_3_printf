.TH _printf 3 "16 March 2019" "0.32" "_Printf Man Page"
.SH NAME
.B _printf
- a custom made function that replicates what printf in the standard library does
.SH SYNOPSIS
#include "holberton.h"
.PP
int printf(const char *format, ...);
.SH DESCRIPTION
In the C programming language, the printf() function is used to print the “character, string, float, integer, octal and hexadecimal values” onto the output screen.
.PP
Our custom made _printf() function replicates exactly how the actual printf() function works. Using variadic functions as a parameter and then returning the number of charcters printed (excluding the null byte used to end output to strings). Where the format (parameter) is a character string. The format string is composed of zero or more directives. 
.PP
We use actual printf() function with %d format specifier to display the value of an integer variable.
.PP
Similarly %c is used to display character, %f for float variable, %s for string variable, %lf for double and %x for hexadecimal variable.
.PP
To generate a newline,we use “\n” in C in our _printf() statement.
.SH Return
Upon successful return, the function (_printf) returns the number of characters printed (excluding the  null byte used to end output to strings).
.SH Format
The format string is a character string, beginning and ending in its initial shift state, if any.
.PP
The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.SH Format Specifiers
.I %c
.IP
The %c format specifier is used to print out a single character
.PP
.I %s
.IP
The %s format specifier is used to print out a desired string of chracters
.PP
.I %i
.IP
The %i format specifier is used to display the value of an integer variable
.PP
.I %d
.IP
The %d format specifier is also used to display the value of an integer variable
.PP
.I %%
.IP
A '%' is written. No argument is converted. The complete conversion specification is '%%'.
.SH Example
#include <limits.h>
.PP
#include <stdio.h>
.PP
#include "holberton.h"
.PP
.PP
int main(void)
.PP
{
.IP
int len;
.IP
int len2;
.IP
_printf("Length:[%d, %i]\n", len, len);
.IP
_printf("Negative:[%d]\n", -762534);
.IP
_printf("Character:[%c]\n", 'H');
.IP
_printf("String:[%s]\n", "I am a string !");
.IP
return (0);
.PP
}
.SH SEE ALSO
man 3 printf
.SH BUGS
Custom _printf() doesn’t reproduce the buffer handling of the C library printf function.
.PP
Custom _printf() doesn’t handle the flag characters.
.PP
Custom _printf() doesn’t handle field width.
.PP
Custom _printf() doesn’t handle precision.
.PP
Custom _printf() doesn’t handle the length modifiers.
.SH AUTHOR
Tim Assavarat, and Jun Zhu